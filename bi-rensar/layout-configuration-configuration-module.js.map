{"version":3,"sources":["webpack:///./src/app/+layout/configuration/configuration-routing.module.ts","webpack:///./src/app/+layout/configuration/configuration.component.html","webpack:///./src/app/+layout/configuration/configuration.component.ts","webpack:///./src/app/+layout/configuration/configuration.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEY;AAEnE,IAAM,MAAM,GAAW,CAAC;QACtB,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,+EAAsB;KAClC,CAAC,CAAC;AAMH;IAAA;IAA0C,CAAC;IAA9B,0BAA0B;QAJtC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,0BAA0B,CAAI;IAAD,iCAAC;CAAA;AAAJ;;;;;;;;;;;;ACdvC,2rBAA2rB,kEAAkE,yDAAyD,8BAA8B,8LAA8L,oBAAoB,yBAAyB,sDAAsD,oBAAoB,0BAA0B,sDAAsD,qJAAqJ,kCAAkC,MAAM,sKAAsK,qBAAqB,UAAU,2BAA2B,oCAAoC,4BAA4B,UAAU,oBAAoB,YAAY,yBAAyB,aAAa,0BAA0B,YAAY,8BAA8B,kBAAkB,+BAA+B,6BAA6B,qBAAqB,UAAU,0BAA0B,qDAAqD,2BAA2B,UAAU,qBAAqB,YAAY,iBAAiB,IAAI,kBAAkB,UAAU,sBAAsB,UAAU,oBAAoB,YAAY,yBAAyB,sCAAsC,0BAA0B,YAAY,0BAA0B,uCAAuC,2BAA2B,UAAU,qBAAqB,QAAQ,sBAAsB,gxIAAgxI,WAAW,6KAA6K,WAAW,2KAA2K,WAAW,gKAAgK,UAAU,iKAAiK,WAAW,+KAA+K,SAAS,+JAA+J,UAAU,gJAAgJ,UAAU,yH;;;;;;;;;;;;;;;;;;;;;;;ACA51P;AAExB;AAMjC;IAAA;IAOA,CAAC;IANC;;OAEG;IACH,gDAAe,GAAf;QACE,oDAAkB,EAAE,CAAC;IACvB,CAAC;IANU,sBAAsB;QAJlC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;;SAE9B,CAAC;OACW,sBAAsB,CAOlC;IAAD,6BAAC;CAAA;AAPkC;;;;;;;;;;;;;;;;;;;;;;;;;;ACRM;AACM;AAE6B;AACT;AAErB;AAU9C;IAAA;IAAmC,CAAC;IAAvB,mBAAmB;QAR/B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,wFAA0B;gBAC1B,2DAAS;aACV;YACD,YAAY,EAAE,CAAC,+EAAsB,CAAC;SACvC,CAAC;OACW,mBAAmB,CAAI;IAAD,0BAAC;CAAA;AAAJ","file":"layout-configuration-configuration-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ConfigurationComponent } from './configuration.component';\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: ConfigurationComponent\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ConfigurationRoutingModule { }\r\n","module.exports = \"<mk-box header=\\\"Configuring Layout\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\r\\n  <p>If can use the layout components or just use the presentation components of angular-admin-lte.</p>\\r\\n  <p> If you chose to use the layout you will need to:</p>\\r\\n  <ol>\\r\\n    <li>Create a layout configuration file.</li>\\r\\n    <li>Import the layout module and provide the layout configuration in your main app module.</li>\\r\\n    <li>Update the main app view.</li>\\r\\n  </ol>\\r\\n</mk-box>\\r\\n\\r\\n\\r\\n<mk-box header=\\\"Configuration File\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\r\\n  <pre><code class=\\\"language-typescript\\\" ngNonBindable>export var adminLteConf = &#123;\\r\\n  skin: 'blue',\\r\\n  ...\\r\\n  sidebarLeftMenu: [\\r\\n    &#123;label: 'Start', route: '/', iconClasses: 'fa fa-th'&#125;,\\r\\n    ...\\r\\n  ]\\r\\n&#125;;\\r\\n</code></pre>\\r\\n</mk-box>\\r\\n\\r\\n<mk-box header=\\\"Import Conf And Module\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\r\\n  <pre><code class=\\\"language-typescript\\\">import &#123; adminLteConf &#125; from './admin-lte.conf';   //Import the layout configuration.\\r\\nimport &#123; LayoutModule &#125; from 'angular-admin-lte';   //Import the layout module.\\r\\n\\r\\n@NgModule(&#123;\\r\\n  imports: [\\r\\n    ...\\r\\n    LayoutModule.forRoot(adminLteConf),   //Provide the configuration to the layout module.\\r\\n  ],\\r\\n  ...\\r\\n&#125;)\\r\\nexport class AppModule &#123;&#125;\\r\\n</code></pre>\\r\\n</mk-box>\\r\\n\\r\\n<mk-box header=\\\"App view HTML\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\r\\n  <pre><code class=\\\"language-html\\\">&lt;mk-layout-wrapper&gt;\\r\\n  &lt;mk-layout-sidebar-right&gt;\\r\\n    Sidebar right HTML\\r\\n  &lt;/mk-layout-sidebar-right&gt;\\r\\n  &lt;mk-layout-header&gt;\\r\\n    &lt;mk-layout-header-logo&gt;Logo HTML&lt;/mk-layout-header-logo&gt;\\r\\n    &lt;mk-layout-header-logo-mini&gt;Logo Mini HTML&lt;/mk-layout-header-logo-mini&gt;\\r\\n    Header HTML\\r\\n  &lt;/mk-layout-header&gt;\\r\\n  &lt;mk-layout-sidebar-left&gt;\\r\\n    Sidebar left HTML (just above menu)\\r\\n  &lt;/mk-layout-sidebar-left&gt;\\r\\n  &lt;mk-layout-content&gt;\\r\\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\\r\\n  &lt;/mk-layout-content&gt;\\r\\n  &lt;mk-layout-footer&gt;\\r\\n    &lt;mk-layout-footer-left&gt;\\r\\n      Footer left HTML\\r\\n    &lt;/mk-layout-footer-left&gt;\\r\\n    &lt;mk-layout-footer-right&gt;\\r\\n      Footer right HTML\\r\\n    &lt;/mk-layout-footer-right&gt;\\r\\n  &lt;/mk-layout-footer&gt;\\r\\n&lt;/mk-layout-wrapper&gt;\\r\\n</code></pre>\\r\\n</mk-box>\\r\\n\\r\\n<mk-box header=\\\"Configuration properties\\\" [isCollapsable]=\\\"true\\\" [isRemovable]=\\\"false\\\" contentStyleClasses=\\\"table-responsive\\\">\\r\\n  <table class=\\\"table table-bordered table-hover\\\">\\r\\n    <tbody>\\r\\n      <tr>\\r\\n        <th>Name</th>\\r\\n        <th>Type</th>\\r\\n        <th>Default</th>\\r\\n        <th>Description</th>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>skin</td>\\r\\n        <td>string ('blue' | 'black' | 'purple' | 'green' | 'red' | 'yellow' | 'blue-light' | 'black-light' | 'purple-light' | 'green-light' | 'red-light' | 'yellow-light')</td>\\r\\n        <td>'blue'</td>\\r\\n        <td>Set the theme skin.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarLeftCollapsed</td>\\r\\n        <td>boolean</td>\\r\\n        <td>false</td>\\r\\n        <td>Defines if the sidebar left is collapsed.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarLeftExpandOnOver</td>\\r\\n        <td>boolean</td>\\r\\n        <td>false</td>\\r\\n        <td>Define if sidebar left expand on mouse over.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarLeftMini</td>\\r\\n        <td>boolean</td>\\r\\n        <td>false</td>\\r\\n        <td>Define if sidebar left minified is visible.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>sidebarRightSkin</td>\\r\\n        <td>string ('dark' | 'light')</td>\\r\\n        <td>'dark'</td>\\r\\n        <td>Set the sidebar right skin.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarRightCollapsed</td>\\r\\n        <td>boolean</td>\\r\\n        <td>true</td>\\r\\n        <td>Defines if the sidebar right is collapsed.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarRightOverContent</td>\\r\\n        <td>boolean</td>\\r\\n        <td>true</td>\\r\\n        <td>Defines if sidebar right slide over content.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>layout</td>\\r\\n        <td>string ('normal' | 'boxed' | 'fixed')</td>\\r\\n        <td>'normal'</td>\\r\\n        <td>Define the layout style.</td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</mk-box>\\r\\n\\r\\n<mk-box header=\\\"Layout setters\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\r\\n  <table class=\\\"table table-bordered table-hover\\\">\\r\\n    <tbody>\\r\\n      <tr>\\r\\n        <th>Name</th>\\r\\n        <th>Parameters</th>\\r\\n        <th>Description</th>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>sidebarLeftCollapsed()</td>\\r\\n        <td>boolean</td>\\r\\n        <td>Programmatically set if sidebar left is collapsed.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>sidebarLeftExpandOnOver()</td>\\r\\n        <td>boolean</td>\\r\\n        <td>Programmatically set if sidebar left expand on over.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>sidebarLeftExpandOnOver()</td>\\r\\n        <td>boolean</td>\\r\\n        <td>Programmatically set if sidebar left expand on over.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>setSidebarRightSkin()</td>\\r\\n        <td>'dark' | 'light'</td>\\r\\n        <td>Programmatically defines sidebar right skin.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>sidebarLeftMini()</td>\\r\\n        <td>boolean</td>\\r\\n        <td>Programmatically set if sidebar left collapsed is visible.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>sidebarRightCollapsed()</td>\\r\\n        <td>boolean</td>\\r\\n        <td>Programmatically set if sidebar right is collapsed.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>sidebarRightOverContent()</td>\\r\\n        <td>boolean</td>\\r\\n        <td>Programmatically set if sidebar right slide over content.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>setSidebarLeftMenu()</td>\\r\\n        <td>Array</td>\\r\\n        <td>Update sidebar right menu.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>setLayout()</td>\\r\\n        <td>string</td>\\r\\n        <td>Update layout style.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>setSkin()</td>\\r\\n        <td>string</td>\\r\\n        <td>Update theme skin.</td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</mk-box>\\r\\n\\r\\n<mk-box header=\\\"Layout subscriptions\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\r\\n  <table class=\\\"table table-bordered table-hover\\\">\\r\\n    <tbody>\\r\\n      <tr>\\r\\n        <th>Name</th>\\r\\n        <th>Parameters</th>\\r\\n        <th>Description</th>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarLeftCollapsed</td>\\r\\n        <td>Observable&lt;boolean&gt;</td>\\r\\n        <td>Subscribe to sidebar left collapse status.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarLeftExpandOnOver</td>\\r\\n        <td>Observable&lt;boolean&gt;</td>\\r\\n        <td>Subscribe to sidebar left expand on over status.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarLeftMini</td>\\r\\n        <td>Observable&lt;boolean&gt;</td>\\r\\n        <td>Subscribe to sidebar left mini status.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>sidebarRightSkin</td>\\r\\n        <td>Observable&lt;string&gt;</td>\\r\\n        <td>Subscribe to sidebar right skin.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarRightCollapsed</td>\\r\\n        <td>Observable&lt;boolean&gt;</td>\\r\\n        <td>Subscribe to sidebar right collapsed status.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>isSidebarRightOverContent</td>\\r\\n        <td>Observable&lt;Array&gt;</td>\\r\\n        <td>Subscribe to sidebar right over content status.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>layout</td>\\r\\n        <td>Observable&lt;string&gt;</td>\\r\\n        <td>Subscribe to layout style changes.</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>skin</td>\\r\\n        <td>Observable&lt;string&gt;</td>\\r\\n        <td>Subscribe to theme skin changes.</td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</mk-box>\\r\\n\"","import { Component, AfterViewInit } from '@angular/core';\r\n\r\nimport * as Prism from 'prismjs';\r\n\r\n@Component({\r\n  selector: 'app-configuration',\r\n  templateUrl: './configuration.component.html'\r\n})\r\nexport class ConfigurationComponent implements AfterViewInit {\r\n  /**\r\n   * @method ngAfterViewInit\r\n   */\r\n  ngAfterViewInit() {\r\n    Prism.highlightAll();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ConfigurationRoutingModule } from './configuration-routing.module';\r\nimport { ConfigurationComponent } from './configuration.component';\r\n\r\nimport { BoxModule } from 'angular-admin-lte';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ConfigurationRoutingModule,\r\n    BoxModule\r\n  ],\r\n  declarations: [ConfigurationComponent]\r\n})\r\nexport class ConfigurationModule { }\r\n"],"sourceRoot":""}